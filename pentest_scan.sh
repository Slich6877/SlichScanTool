#!/bin/bash

# Ensure a target URL or IP or range or hostname is provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <target_url_or_ip>"
    exit 1
fi

TARGET="$1"
LOG_DIR="logs"
NOTIFY_ON_COMPLETION=true
RETRY_COUNT=1
BACKOFF_TIME=5  # Exponential backoff time for retries
TASKS_LIMIT=10  # Default maximum parallel tasks (adjustable)
THREADS=20  # Default thread count for Gobuster, can be adjusted dynamically
SKIP_WAIT_FOR_ENTER=false
CUSTOM_SCRIPTS="http-vuln-cve2014-3704.nse,ftp-anon.nse,smb-enum-shares.nse"
$DECOY_IP = ""

# Create log directory if it doesn't exist
mkdir -p $LOG_DIR
GOBUSTER_LOG="$LOG_DIR/gobuster_$(date +%F_%T).txt"
GOBUSTERRECURSIVE_LOG="$LOG_DIR/gobuster_recursive$(date +%F_%T).txt"
NIKTO_LOG="$LOG_DIR/nikto_$(date +%F_%T).html"
NMAP_LOG="$LOG_DIR/nmap_$(date +%F_%T).txt"
ERROR_LOG="$LOG_DIR/error_log_$(date +%F_%T).txt"
SCAN_PROGRESS="$LOG_DIR/progress_$(date +%F_%T).txt"
SUMMARY_REPORT="$LOG_DIR/scan_summary_$(date +%F_%T).json"
ALL_PORTS_LOG="$LOG_DIR/all_ports.txt"
OPEN_PORTS_LOG="$LOG_DIR/open_ports.txt"

# Define colors for user interface
GREEN='\033[0;32m'
YELLOW='\033[0;93m'
AYELLOW='\033[93m'
RED='\033[0;31m'
TesteRED='\033[0;95m'
BLUE='\033[0;34m'
LBLUE='\033[0;34m'
RLPURPLE='\033[0;94m'
CYAN='\033[0;36m'
MCYAN='\033[1;36m'
MAGENTA='\033[0;91m'
WHITE='\033[0;37m'
PURPLE='\033[0;35m'
MGREEN='\033[1;32m'
MRED='\033[0;31m'
NC='\033[0m' # No color, reset

# Function to send desktop notifications
send_notification() {
    if $NOTIFY_ON_COMPLETION && command -v notify-send &>/dev/null; then
        notify-send "Scan Completed" "All scans have completed successfully for $TARGET."
    fi
}

# Function to wait for user to press Enter before returning to the main menu
wait_for_enter() {
    echo -e "\033[1;33m[INFO] Press Enter to return to the main menu or Ctrl+C to exit.\033[0m"
    read -p "Press Enter to continue..."
    clear  # Clear the screen to make the menu appear cleanly
}

# Check if required tools are installed
check_dependencies() {
    command -v gobuster &>/dev/null || { echo -e "\033[1;31m[gobuster] not found! Please install it.\033[0m" && exit 1; }
    command -v nikto &>/dev/null || { echo -e "\033[1;31m[nikto] not found! Please install it.\033[0m" && exit 1; }
    command -v nmap &>/dev/null || { echo -e "\033[1;31m[nmap] not found! Please install it.\033[0m" && exit 1; }
    command -v parallel &>/dev/null || { echo -e "\033[1;31m[parallel] not found! Please install it.\033[0m" && exit 1; }
}

# Retry function for failed commands (exponential backoff)
retry_command() {
    local cmd=$1
    local retries=$2
    local count=0
    local delay=$BACKOFF_TIME
    until [ $count -ge $retries ]
    do
        $cmd && return 0
        count=$((count+1))
        echo -e "\033[1;33m[ERROR] Command failed. Retrying... ($count/$retries)\033[0m"
        sleep $delay
        delay=$((delay * 2))  # Exponential backoff
    done
    echo -e "\033[1;31m[ERROR] Command failed after $retries retries.\033[0m"
    return 1
}

# Dynamically adjust number of threads based on system load
adjust_threads() {
    CPU_CORES=$(nproc)
    MEM_USED=$(free -m | awk '/Mem:/ {print $3}')
    MEM_TOTAL=$(free -m | awk '/Mem:/ {print $2}')
    MEM_USAGE_PERCENT=$((100 * MEM_USED / MEM_TOTAL))

    BASE_THREADS=20
    if [ $MEM_USAGE_PERCENT -ge 80 ]; then
        THREADS=$((CPU_CORES))  # Limit threads to CPU cores if memory is high
    else
        THREADS=$((BASE_THREADS < CPU_CORES * 2 ? CPU_CORES * 2 : BASE_THREADS))  # Balance threads based on memory and CPU cores
    fi

    echo -e "\033[1;34m[INFO] Adjusted thread count to $THREADS based on system resources.\033[0m"
}

# Handle SIGINT gracefully (Ctrl+C)
trap "echo -e '\033[1;33m[INFO] Exiting the tool...'; exit 0" SIGINT

# Logging and status updates
log_info() {
    echo -e "\033[1;32m[INFO] $1\033[0m"
    echo "[INFO] $1" >> $SCAN_PROGRESS
}

# Run Nmap scan and extract open ports with services/versions/vulnerabilities
run_nmap_scan() {
    log_info "Starting Nmap scan for $TARGET..."
    echo

    # Define default scan profile if not provided
    local scan_profile=""  # Default scan type
    local nmap_options=""

    # Define scan profiles and corresponding options using indexed arrays
    scan_profiles=(
        "${GREEN}1)${NC} Fast Open Port Scan|-T4 -F -v --open"
        "${GREEN}2)${NC} More Detailed Fast Port Scan (OS,Service)|-T4 -F -v -O -sV --open"
        "${GREEN}3)${NC} Open Port Scan (Full Range,Auth Scripts)|-T4 -F -v --open --script=ftp-anon,ssh-auth-methods"
        "${GREEN}4)${NC} Comprehensive Service OS Scan (Common Ports)|-p 21,22,23,25,53,80,443,110,143,3306,3389,5900,8080,5432,6379,11211,27017,465,993,995,5000 -T4 -O -sV -sC"
        "${GREEN}5)${NC} TCP Connect Scan (Ports 1-1000)|-T4 -sT -p 1-1000 -v --open --min-rate 1000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"
        "${GREEN}6)${NC} UDP Scan (Ports 1-1000)|-T4 -sU -p 1-1000 -v --open --min-rate 1000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"
        "${GREEN}7)${NC} OS Detection Scan (TCP SYN,Fast)|-T4 -sS -O -v --open --min-rate 1000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"
        "${GREEN}8)${NC} Custom Script Scan (User Defined,Ports 1-1000)|-T4 --script $CUSTOM_SCRIPTS -p 1-1000 --open --min-rate 1000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"
        "${YELLOW}9)${NC} Basic Discovery Scan (TCP SYN,Fast)|-T4 -F -v --open --min-rate 1000 --max-retries 2 --host-timeout 15m --reason --randomize-hosts --script discovery"        
        "${YELLOW}10)${NC} Service Version Scan (Full Range)|-T4 -p 1-65535 -sV --open --min-rate 1000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"
        "${YELLOW}11)${NC} Common Scan (Service,Auth Scripts,OS)|-sC -sV -T4 -O --osscan-guess --script=ftp-anon,ssh-auth-methods,ssh-brute"
        "${YELLOW}12)${NC} Default Port Scan (TCP SYN)|-T4 -p- --min-rate=1000 --max-retries=3 -sV"
        "${YELLOW}13)${NC} Vulnerability & Exploit Scan|-T4 --script vuln,exploit -p 1-65535 -v --open --min-rate 2000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"        
	"${MRED}14)${NC} Standard Scan (Service,Auth Scripts)|-sC -sV -T4 -O --osscan-guess -p 1-65535 --script=ftp-anon,ssh-auth-methods,ftp-brute,ssh-brute"
        "${MRED}15)${NC} Aggressive Scripted Scan (Vuln,Default,OS,Service Version)|-T4 -A --script=default,vuln -p 1-65535 --open --min-rate 2000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"
        "${MRED}16)${NC} Comprehensive Scan (Vuln,Aggressive)|-T4 -A --script vuln,default,discovery,safe -p 1-65535 -v --open --min-rate 2000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"
        "${MRED}17)${NC} Full Port Scan (Vuln,Aggressive)|-T4 -p- -A --script vuln,discovery,default,safe -v --open --min-rate 2000 --max-retries 3 --host-timeout 30m --reason --randomize-hosts"

        "${RLPURPLE}18)${NC} SYN Stealth Scan (Service,Version,OS,Scripts)|-T4 -sS -p 1-65535 -sV -O --script vuln,discovery,default -v --open --max-retries 3 --min-rate 1000 --host-timeout 30m --reason --randomize-hosts"
        "${RLPURPLE}19)${NC} Firewall Evasion Scan (Decoy,Service,Vuln)|-T3 -p 1-65535 -sS -sV -O --script vuln,discovery --decoy $DECOY_IP --randomize-hosts --host-timeout 30m --reason --min-rate 1000"
        "${RLPURPLE}20)${NC} Firewall Evasion Scan (Stealth,OS)|-T3 -sS -p 1-65535 -O --randomize-hosts --min-rate 1000 --max-retries 2 --host-timeout 30m --reason"
    )

    # Display the list of scan profiles with colored profile names
    echo -e "Choose a scan profile:"
    echo
    for ((i=0; i<${#scan_profiles[@]}; i++)); do
        # Get the profile name
        profile_name=$(echo "${scan_profiles[$i]}" | cut -d '|' -f 1)

        # Colorize and print the profile name
        echo -e "${profile_name}"
    done

    # Ask the user to choose a scan profile
    echo
    read -p "Enter the number of the scan profile you want to use: " selected_profile
    selected_profile=$((selected_profile - 1))  # Convert to zero-indexed
    echo

    # Check if the selected profile is within valid range
    if ((selected_profile < 0 || selected_profile >= ${#scan_profiles[@]})); then
        echo -e "\033[1;31mInvalid selection, please choose a valid profile number.\033[0m"
        return 1
    fi

    # Extract the Nmap options for the selected scan profile
    nmap_options=$(echo "${scan_profiles[$selected_profile]}" | cut -d '|' -f 2)

    # Run the Nmap scan with the selected options
    echo -e "Running Nmap scan..."
    nmap $nmap_options -oN $NMAP_LOG $TARGET

    # Check for scan completion
    if [ $? -eq 0 ]; then
	echo
        log_info "Nmap scan completed. Results saved to $NMAP_LOG."
    else
	echo
        echo -e "\033[1;31mNmap scan failed. Please check your configuration.\033[0m"
    fi

    # Send completion notification for Nikto scan
    send_notification

    # Wait for user input before proceeding
    if [ "$SKIP_WAIT_FOR_ENTER" = false ]; then
        wait_for_enter
    fi
}


# Run Gobuster scan
run_gobuster_scan() {
    log_info "Starting Gobuster scan..."
    echo
    # Prompt the user to input the target URL only for the first-level scan
    read -p "Enter the target URL : " TARGETGOBUSTER

    # Check if the TARGETGOBUSTER variable is empty, and exit if it is
    if [ -z "$TARGETGOBUSTER" ]; then
        echo -e "\033[1;31mError: Target URL/IP is required. Exiting.\033[0m"
        exit 1
    fi

    # Prompt the user to input file extensions
    read -p "Enter the file extensions to search for (comma separated, e.g., .php,.html,.bak): " EXTENSIONS
    echo
    # Format the extensions input for the Gobuster -x flag
    EXTENSIONS=$(echo "$EXTENSIONS" | sed 's/\s//g' | tr ',' '\n' | tr '\n' ',' | sed 's/,$//')

    # Allow the user to choose a wordlist
    echo -e "Choose a wordlist:"
    echo
    echo -e "${GREEN}1)${NC} /usr/share/SecLists/Discovery/Web-Content/common.txt"
    echo -e "${YELLOW}2)${NC} /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt"
    echo -e "${MRED}3)${NC} /usr/share/wordlists/rockyou.txt"
    echo
    read -p "Enter your choice: " wordlist_choice
    echo
    # Assign the chosen wordlist based on the user's selection
    case $wordlist_choice in
        1)
            WORDLIST="/usr/share/SecLists/Discovery/Web-Content/common.txt"
            ;;
        2)
            WORDLIST="/usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt"
            ;;
        3)
            WORDLIST="/usr/share/wordlists/rockyou.txt"
            ;;
        *)
            echo -e "\033[1;31mInvalid option. Defaulting to directory-list-2.3-medium.txt.\033[0m"
            WORDLIST="/usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt"
            ;;
    esac

    # Debugging: Print the selected wordlist
    echo -e "\033[1;32m[INFO] Using wordlist: $WORDLIST\033[0m"
    echo

    # Debugging: Verify that the log file path is correct
    echo "Gobuster output will be saved to: $GOBUSTER_LOG"

    # First-level Gobuster scan with the extensions provided by the user and the selected wordlist
    retry_command "gobuster dir -u $TARGETGOBUSTER -w $WORDLIST -t $THREADS -x $EXTENSIONS -o $GOBUSTER_LOG" $RETRY_COUNT

    # Check if Gobuster ran successfully by checking the exit status
    if [ $? -ne 0 ]; then
	echo
        log_info "Gobuster scan failed. Check $GOBUSTER_LOG for more details."
    else
        echo
        log_info "Gobuster scan completed successfully. Output saved to $GOBUSTER_LOG"
    fi

    # Highlight and grep status codes between 300-399 and append them to the original log file
    echo -e "\n\n==================== Status Codes Between 300-399 ====================" >> $GOBUSTER_LOG
    grep -P 'Status: (3\d{2})' $GOBUSTER_LOG | while read -r line; do
        # Highlight each status code occurrence and append to the file
        echo "$line" >> $GOBUSTER_LOG
    done

    log_info "Highlighted status codes between 300-399 appended to: $GOBUSTER_LOG"

    # Extract the directories with status codes between 300 and 399 (redirects)
    REDIRECT_DIRS=$(grep -P 'Status: (3\d{2})' $GOBUSTER_LOG | awk '{print $1}' | sort | uniq)

    # If redirect directories are found (status 300-399), start recursive scan
    if [ ! -z "$REDIRECT_DIRS" ]; then
        log_info "Found redirect directories (status codes 300-399): $REDIRECT_DIRS. Starting recursive scan..."

        # Loop through each found directory and run Gobuster to discover hidden dirs inside
        for DIR in $REDIRECT_DIRS; do
            log_info "Running Gobuster on redirect directory: $DIR"
	    echo
            # Perform a second round of Gobuster on found redirect directories
            retry_command "gobuster dir -u $TARGETGOBUSTER$DIR -w $WORDLIST -t $THREADS -x $EXTENSIONS -o $GOBUSTERRECURSIVE_LOG" $RETRY_COUNT

            # Check if the second round of Gobuster ran successfully
            if [ $? -ne 0 ]; then
		echo
                log_info "Gobuster scan failed on redirect directory: $DIR. Check $GOBUSTERRECURSIVE_LOG for more details."
            else
		echo
                log_info "Gobuster scan completed successfully on redirect directory: $DIR."
            fi

            # Highlight and grep status codes between 300-399 and append them to the original log file
            echo -e "\n\n==================== Status Codes Between 300-399 ====================" >> $GOBUSTERRECURSIVE_LOG
            grep -P 'Status: (3\d{2})' $GOBUSTERRECURSIVE_LOG | while read -r line; do
                # Highlight each status code occurrence and append to the file
                echo "$line" >> $GOBUSTERRECURSIVE_LOG
            done

            log_info "Highlighted status codes between 300-399 appended to: $GOBUSTERRECURSIVE_LOG"
        done
    else
        log_info "No redirect directories found with status codes between 300-399 in initial scan. Skipping recursive scan."
    fi
    
    # Send completion notification for Gobuster scan
    send_notification

    # Wait for user to press Enter before returning to main menu
    if [ "$SKIP_WAIT_FOR_ENTER" = false ]; then
        wait_for_enter
    fi
}


# Run Nikto scan after Gobuster finishes

run_nikto_scan() {
    log_info "Starting Nikto scan for $TARGET..."
    echo
    # Ask the user for the type of scan to perform
    # Allow the user to choose a wordlist
    echo -e "Choose a scan profile:"
    echo
    echo -e "${GREEN}1)${NC} Simple Scan"
    echo -e "${YELLOW}2)${NC} Default Scan"
    echo
    read -p "Enter the number of the scan profile you want to use: : " scan_choice
	echo

    # Use case statement to decide which Nikto command to run
    case $scan_choice in
        1)
            # Detailed Nikto command with multiple ports and advanced options
            log_info "Running Simple Nikto scan"
			echo
	    nikto -h $TARGET -p 80,443,8080,8443,8000,8888 -T 2 -o $NIKTO_LOG -Format htm -Tuning 1,2,3,4,5,6,7,8,9 -Plugins @@Default
            ;;
        2)
            # Basic Nikto command (scans on default ports)
            log_info "Running Default Nikto scan"
			echo
            nikto -h $TARGET -o $NIKTO_LOG
            ;;

        *)
            log_info "Invalid choice. Please select either 1 or 2."
            return 1
            ;;
    esac

    # Check if the Nikto scan was successful
    if [ $? -ne 0 ]; then
		echo
        log_info "Nikto scan failed. Check $NIKTO_LOG for more details."
    else
		echo
        log_info "Nikto scan completed successfully. Output saved to $NIKTO_LOG"
    fi

    # Run WhatWeb to detect technologies
    log_info "Running WhatWeb to detect web technologies on $TARGET..." >> $NIKTO_LOG
    whatweb $TARGET >> $NIKTO_LOG

    # Send completion notification for Nikto scan
    send_notification

    # Wait for user to press Enter before returning to main menu (if not skipped)
    if [ "$SKIP_WAIT_FOR_ENTER" = false ]; then
        wait_for_enter
    fi
}

run_all_scans() {
    log_info "Starting all scans for $TARGET..."
    
    # Set flag to skip wait_for_enter for all scans in this function
    SKIP_WAIT_FOR_ENTER=true
    
    # Run Nmap scan
    run_nmap_scan
    
    # Run Gobuster scan
    run_gobuster_scan
    
    # Run Nikto scan
    run_nikto_scan

    # Reset the flag to avoid skipping wait_for_enter for other cases
    SKIP_WAIT_FOR_ENTER=false
    
    # Send completion notification for all scans
    send_notification
}

# Execute the entire scan process
run_scan() {
    log_info "Scan started for $TARGET at $(date)"
    check_dependencies
    ad
    # -Plugins 'ssl,apache,method,webdav,osx,backdoor' (Include key Nikto plugins)

just_threads  # Adjust threads dynamically
    run_nmap_scan &  # Run Nmap scan in background
    wait  # Ensure Nmap scan completes before starting Gobuster

    # Run Gobuster and then Nikto sequentially
    run_gobuster_scan
    run_nikto_scan
    correlate_vulnerabilities
}

# Main function to execute selected scan(s)
run_selected_scan() {
    case $1 in
        1)
            run_nmap_scan
            ;;
        2)
            run_gobuster_scan
            ;;
        3)
            run_nikto_scan
            ;;
        4)
            run_nmap_scan
            run_gobuster_scan
            ;;
        5)
            run_nmap_scan
            run_nikto_scan
            ;;
        6)
            run_gobuster_scan
            run_nikto_scan
            ;;
        7)
            run_all_scans
            ;;
        8)
            echo -e "\033[1;31mExiting the script. No scans will be performed.\033[0m"
            exit 0
            ;;
        *)
            echo -e "\033[1;31mInvalid option. Please enter a number between 1 and 8.\033[0m"
            ;;
    esac
}

# Function to display the menu with user-friendly options
display_menu() {
    clear

echo -e "\033[0;31m
                                            P.                        
                                         :Y#&!                        
                                       7B&##P             .~Y:       
                                     ^P&##PG#^          ^JP#Y        
                                   .?####&?5&Y       ^?G#5PG.        
                                 .~G&####&?7&B~~^.:7P#&57P&!         
                             .~?5G########5.B#B##BB&&G!!B&5          
                          .!YB#&#########&P J&######Y ?###^          
                        .?G#B###########&5.^P#######B??#&J           
                       7PY?YG######GG###5~Y########GB&GG&J           
                     :7~^?G#######G7###G5#&########B5YB&##7          
                    .:.7B&#######B:5#################P~J#&#!         
                     :P&########B:~#####S########&###B^^G&#^        
                    ^B&########B^ P#####L#BY7~^^!!JG###B..G&B^       
                   ^B&&BB#####B^ !######I###BPJ~^YJ7!P#&? ~#&J       
                  :B&B?JB###&B^ .G&#####C#####&&J:J5^7&#7 ^&G.       
                  5#?.~####BY:  .JG#&###H######5YY!:B&G!.J#?       
                 !G^ :B####5???7!^:^?G#&#########&&#J~B&#P~7#P^     
                 J:  J&#####&&&&##BP! ^?P#&##########&PJB###5?B#J.   
                 .   P#############G: .7~~?5B##########BB####BP#&G~  
                     G############&?  P&#BPYJ5G##############J^^^^:  
                     5##PY&########G: B#######BB##############J:7YY5?
                     7&&7:B#########B77B########&&##############&&B?.
                     .G&^ !##########&GG#####Y^~7JPB#&&######&&#5!.  
                      ^#!  ~B&###############:     .^7YGB###B57:     
                       ~Y   :Y#&######B#&BPB&?          :^~^.        
                        ^~    ^5#&####?^7YJ~!Y!                      
                         ..     ^JG#&&#?  ..  ..                     
                                   ^?5B#P~                           
                                      .~?Y7:        

\033[0m"
    echo -e "\033[0;31m=========================== SLICH SCAN TOOL ================================\033[0m"
    echo -e "\033[0;32m1)\033[0m Run Nmap scan only"
    echo -e "\033[0;32m2)\033[0m Run Gobuster scan only"
    echo -e "\033[0;32m3)\033[0m Run Nikto scan only"
    echo -e "\033[0;32m4)\033[0m Run Nmap and Gobuster"
    echo -e "\033[0;32m5)\033[0m Run Nmap and Nikto"
    echo -e "\033[0;32m6)\033[0m Run Gobuster and Nikto"
    echo -e "\033[0;32m7)\033[0m Run all three scans (Nmap, Gobuster and Nikto)"
    echo -e "\033[0;31m8)\033[0m Exit the script"
    echo -e "\033[0;31m===========================================================================\033[0m"
    echo
}

# Function to confirm user's selection
confirm_selection() {
    read -p "You selected option $1. Do you want to proceed? [y/n]: " confirm
    echo
    if [[ $confirm =~ ^[Yy]$ ]]; then
        run_selected_scan $1
    else
        echo -e "\033[1;33m[INFO] Action canceled.\033[0m"
        echo
    fi
}

# Main loop to display menu until a valid choice is made
while true; do
    display_menu
    read -p "Enter your choice [1-8]: " choice
    if [ "$choice" -ge 1 ] && [ "$choice" -le 8 ]; then
        confirm_selection $choice
        if [[ "$choice" -eq 8 ]]; then
            break
        fi
    else
        echo -e "\033[1;31mInvalid option. Please enter a number between 1 and 8.\033[0m"
        echo
    fi
done
